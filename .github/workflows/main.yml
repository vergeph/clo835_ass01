# This is a basic workflow to help you get started with Actions

name: Build Docker Image and Push to AWS ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
  # Strategy matrix for 4 repositories
    strategy:
      matrix:
        ecr_repos: [blue, pink, lime, mysql]
        
   # Env to use the repositories     
    env:
      ECR_REPO_PREFIX: ass01-dev
      IMAGE_TAG: v0.1
      REPO: ${{ matrix.ecr_repos }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Login to Amazon ECR with Secret Keys from CLI
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1        

      # Runs a set of commands using the runners shell
      
      - name: Build docker images for color app and mysql
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd simple-webapp-color/
          ls -ltra
          docker build -t -f blue $ECR_REGISTRY/$ECR_REPO_PREFIX-blue:$IMAGE_TAG .
	        docker build -t -f pink $ECR_REGISTRY/$ECR_REPO_PREFIX-pink:$IMAGE_TAG .
          docker build -t -f lime $ECR_REGISTRY/$ECR_REPO_PREFIX-lime:$IMAGE_TAG .
	        docker build -t -f mysql $ECR_REGISTRY/$ECR_REPO_PREFIX-mysql:$IMAGE_TAG .
    
    - name: Test docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker run -d -p 8080:8081 --name $REPO-app $ECR_REGISTRY/$ECR_REPO_PREFIX-blue:$IMAGE_TAG
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        curl localhost -vvv
	      docker run -d -p 8080:8082 --name $REPO-app $ECR_REGISTRY/$ECR_REPO_PREFIX-pink:$IMAGE_TAG
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        curl localhost -vvv
	      docker run -d -p 8080:8083 --name $REPO-app $ECR_REGISTRY/$ECR_REPO_PREFIX-lime:$IMAGE_TAG
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        curl localhost -vvv
      
    - name: Push docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-blue:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-pink:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-lime:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-mysql:$IMAGE_TAG
   
